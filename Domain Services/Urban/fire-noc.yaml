openapi: 3.0.1
info:
  title: eGov Fire NOC module.
  description: |
    APIs for Fire NOC module. This modules handles Below functionality.
      1. Apply Fire NOC.
      2. Search existing Fire NOC with different fiters.
      3. Update exiting Fire NOC.
  contact:
    name: eGovernments Foundation
    email: contacts@egovernments.org
  version: 1.0.0
servers:
- url: /firenoc-services
tags:
- name: Fire NOC
  description: APIs required for Fire NOC.
paths:
  /v1/_search:
    post:
      tags:
      - Fire NOC
      summary: Get the list of Fire NOC(s) defined in the system.
      description: 1. Search and get Fire NOC(s)  based on defined search criteria.
      parameters:
      - name: tenantId
        in: query
        description: Unique id for a tenant.
        required: true
        schema:
          type: string
          format: varchar
      - name: pageNumber
        in: query
        description: Page number
        schema:
          type: integer
          default: 1
      - name: status
        in: query
        description: Search based on status.
        allowEmptyValue: true
        schema:
          type: string
      - name: ids
        in: query
        description: unique identifier of Fire NOC
        style: form
        explode: false
        schema:
          maxItems: 50
          type: array
          items:
            type: string
      - name: applicationNumber
        in: query
        description: Unique application number for a Fire NOC application.
        schema:
          maxLength: 64
          minLength: 2
          type: string
      - name: fireNOCNumber
        in: query
        description: The unique  license number  for a Fire NOC.
        schema:
          maxLength: 64
          minLength: 2
          type: string
      - name: mobileNumber
        in: query
        description: The mobile number of a Fire NOC owner.
        schema:
          pattern: '[0-9]'
          type: string
      - name: fireNOCType
        in: query
        description: Fire NOC type.
        schema:
          type: string
      requestBody:
        description: Parameter to carry Request metadata in the request body
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RequestInfo'
        required: false
      responses:
        200:
          description: Fire NOC(s) Retrived Successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FireNOCResponse'
        400:
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes'
      x-codegen-request-body-name: requestInfo
  /v1/_create:
    post:
      tags:
      - Fire NOC
      summary: Create new Fire NOC.
      description: |
        To create new Fire NOC in the system. API supports bulk creation with max limit as defined in the Fire NOC Request. Please note that either whole batch succeeds or fails, there's no partial batch success. To create one Fire NOC, please pass array with one Fire NOC object.


        Following Conditions are applied -
          1. Support Documents for a given Fire NOC will created. In case of not attaching the Mandatory Supported Documents creation of Fire NOC Fails.
          2. Noc Number will be autogenerated on final approval for new License.
          3. ApplicationNumber will be autogenerated for new Fire NOC
      requestBody:
        description: Details for the new Fire NOC(s) + RequestInfo meta data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FireNOCRequest'
        required: true
      responses:
        201:
          description: ReponseInfo with Fire NOC(s) created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FireNOCResponse'
        400:
          description: Fire NOC(s) creation failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes_2'
      x-codegen-request-body-name: FireNOCRequest
  /v1/_update:
    post:
      tags:
      - Fire NOC
      summary: update existing Fire NOCs.
      description: |
        To update existing Fire NOC in the system. API supports bulk updation with max limit as defined in the Fire NOC Request. Please note that either whole batch succeeds or fails, there's no partial batch success. To update one Fire NOC, please pass array with one Fire NOC object.

        Following Conditions are applied -
          1. Before payment Employee or Citizen can update any details of Fire NOC
          2. After payment Citizen or Employee can't change any details of Fire NOC.
      requestBody:
        description: Details for the new Fire NOC(s) + RequestInfo meta data.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FireNOCRequest'
        required: true
      responses:
        201:
          description: ReponseInfo with Fire NOC(s) updated sudcessfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FireNOCResponse'
        400:
          description: Fire NOC(s) updation failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorRes_2'
      x-codegen-request-body-name: FireNOCRequest
components:
  schemas:
    Buildings:
      required:
      - name
      - tenantId
      - uoms
      - usageType
      type: object
      properties:
        id:
          maxLength: 64
          minLength: 2
          type: string
          description: Unique Identifier of the Fire NOC building details (UUID)
          readOnly: true
        tenantId:
          maxLength: 128
          minLength: 2
          type: string
          description: Unique Identifier of ULB
        name:
          type: string
          description: name of the building
        usageType:
          type: string
          description: building usage type
        uoms:
          type: array
          items:
            $ref: '#/components/schemas/BuildingUOM'
        applicationDocuments:
          type: array
          description: 1. List of all the required documents. 2. Application can be
            submitted without required document 3. Once all the document submitted
            then only application submition process will be completed. 4. Mandatry
            application documents for a fireNOC type and fireNOC subtype are defined
            under ApplicationDocument master which is defined under MDMS.
          items:
            $ref: '#/components/schemas/Document'
      description: It will contains building details
    PropertyDetails:
      type: object
      properties:
        id:
          maxLength: 64
          minLength: 2
          type: string
          description: Unique Identifier of the property details (UUID)
          readOnly: true
        propertyId:
          type: string
        address:
          $ref: '#/components/schemas/Address'
      description: It will have fire noc related entities
    OwnerInfo:
      allOf:
      - $ref: '#/components/schemas/User'
      - type: object
        properties:
          isPrimaryOwner:
            type: boolean
            description: The owner is primary or not
          ownerShipPercentage:
            type: number
            description: Ownership percentage.
            format: double
          ownerType:
            maxLength: 256
            minLength: 4
            type: string
            description: Type of owner, based on this option Exemptions will be applied.
              This is master data defined in mdms.
          relationship:
            type: string
            description: Relationship with owner.
            enum:
            - FATHER
            - HUSBAND
          documents:
            type: object
            description: Document of the owner.
    Document:
      required:
      - documentType
      - fileStoreId
      - tenantId
      type: object
      properties:
        tenantId:
          maxLength: 128
          minLength: 2
          type: string
          description: Unique Identifier of ULB
        documentType:
          maxLength: 64
          minLength: 2
          type: string
          description: 1.Unique document type code from common master. 2. This is
            defined under mdms common master. 3. Object defination is defined under
            'https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-1-1.yml#/definitions/DocumentType'
        fileStoreId:
          maxLength: 64
          minLength: 2
          type: string
          description: Unique file store id of uploaded document.
        documentUid:
          maxLength: 64
          minLength: 2
          type: string
          description: document number(eg.Pan number, aadhar number).
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
      description: A Object holds the basic data for a Fire NOC
    FireNOC:
      required:
      - dateOfApplied
      - fireNOCDetails
      - tenantId
      type: object
      properties:
        id:
          maxLength: 64
          minLength: 2
          type: string
          description: Unique Identifier of the Fire NOC (UUID)
          readOnly: true
        tenantId:
          maxLength: 128
          minLength: 2
          type: string
          description: Unique Identifier of ULB
        fireNOCNumber:
          maxLength: 64
          minLength: 2
          type: string
          description: Unique Fire NOC Number of the Fire NOC. This is  unique in
            system for a tenant. This is mandatory but always be generated on the
            final approval.
          readOnly: true
        provisionFireNOCNumber:
          maxLength: 64
          minLength: 2
          type: string
          description: Unique Fire NOC Number of the Provision Fire NOC number that
            will be used for linking provision fire NOC number with new fire NOC number.
            This is  unique in system for a tenant. This is mandatory but always be
            generated on the final approval.
        oldFireNOCNumber:
          maxLength: 64
          minLength: 2
          type: string
          description: Unique Old License Number of the Fire NOC. This is  unique
            in system for a tenant. This is mandatory  for legacy license(DataEntry).
        dateOfApplied:
          type: integer
          description: Applied Date of the fire NOC as epoch
          format: int64
        fireNOCDetails:
          $ref: '#/components/schemas/FireNOCDetails'
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
      description: A Object holds the basic data for a Fire NOC
    FireNOCDetails:
      required:
      - action
      - applicantDetails
      - channel
      - financialYear
      - fireNOCType
      - firestationId
      - propertyDetails
      type: object
      properties:
        id:
          maxLength: 64
          minLength: 2
          type: string
          description: Unique Identifier of the Fire FireNOC Details (UUID)
          readOnly: true
        applicationNumber:
          maxLength: 64
          minLength: 2
          type: string
          description: Unique Application FireNOC Number of the Fire FireNOC. This
            is  unique in system for a tenant. This is mandatory but always be generated
            on the final approval.
          readOnly: true
        fireNOCType:
          type: string
          description: type of fire NOC from mdms
        firestationId:
          type: string
          description: Fire station id where we are applying fire fireNOC.
        applicationDate:
          type: integer
          description: date on which applicaiton has been generated for new Fire NOC.
          format: int64
          readOnly: true
        financialYear:
          maxLength: 64
          minLength: 2
          type: string
          description: Fire NOC applicable for financial year.
        issuedDate:
          type: integer
          description: 1. License issued Date of the Fire NOC as epoch. 2. Application
            approval date.
          format: int64
          readOnly: true
        validFrom:
          type: integer
          description: Date from when Fire NOC is valid as epoch
          format: int64
        validTo:
          type: integer
          description: Expiry Date of the Fire NOC as epoch
          format: int64
        action:
          type: string
          description: 1. Perform action to change the state of the Fire NOC. 2. INITIATE,
            if application is getting submitted without required document. 3. APPLY,
            if application is getting submitted with application documents, in that
            case api will validate all the required application document. 4. APPROVE
            action is only applicable for specific role, that role has to be configurable
            at service level. Employee can approve a application only if application
            is in APPLIED state and Fire NOC fees is paid.
          enum:
          - INITIATE
          - APPLY
          - APPROVE
          - REJECT
          - CANCEL
        channel:
          maxLength: 64
          minLength: 2
          type: string
          description: License can be created from different channels
          enum:
          - COUNTER
          - CITIZEN
          - DATAENTRY
        noOfBuildings:
          type: string
          description: it might be single or multiple
        buildings:
          type: array
          items:
            $ref: '#/components/schemas/Buildings'
        propertyDetails:
          $ref: '#/components/schemas/PropertyDetails'
        applicantDetails:
          type: object
          properties:
            ownerShipType:
              type: string
              description: type pf the owner ship
            owners:
              type: array
              description: Fire NOC owners, these will be citizen users in system.
              items:
                $ref: '#/components/schemas/OwnerInfo'
            additionalDetail:
              type: object
              properties: {}
              description: Json object to store additional details about license,
                this will be used when ownership is intitution or others
          description: This will have details about applicant details
        additionalDetail:
          type: object
          properties: {}
          description: Json object to store additional details about license
        auditDetails:
          $ref: '#/components/schemas/AuditDetails'
      description: A Object holds the basic data for a Fire NOC
    FireNOCRequest:
      required:
      - FireNOCs
      - RequestInfo
      type: object
      properties:
        RequestInfo:
          $ref: '#/components/schemas/RequestInfo'
        FireNOCs:
          type: array
          description: Used for search result and create only
          items:
            $ref: '#/components/schemas/FireNOC'
      description: Contract class to receive request. Array of Noc items are used
    FireNOCResponse:
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo_2'
        FireNOCs:
          type: array
          description: Used for search result and create only
          items:
            $ref: '#/components/schemas/FireNOC'
      description: Contract class to send response. Array of Fire NOC items are used
        in case of search results or response for create, whereas single Fire NOC
        item is used for update
    BuildingType:
      type: object
      properties:
        code:
          type: string
          description: Unique value for each entry in mdms data
        UoMs:
          type: array
          description: List of UoMs based building type
          items:
            type: string
        active:
          type: boolean
      description: This is mdms defination for BuildingType object
    FireNOCType:
      type: object
      properties:
        code:
          type: string
          description: Unique value for each entry in mdms data
        active:
          type: boolean
      description: Type of FireNOC Provisional and New
    OwnershipType:
      type: object
      properties:
        code:
          type: string
          description: Unique value for each entry in mdms data
        active:
          type: boolean
      description: Owner ship type Individual/multiple/Insti
    OwnerSpecialCategory:
      type: object
      properties:
        code:
          type: string
          description: Unique value for each entry in mdms data
        active:
          type: boolean
      description: Owner special category Widow/freedom fighter
    FireStations:
      type: object
      properties:
        code:
          type: string
          description: Unique value for each entry in mdms data
        baseTenantId:
          type: string
          description: When multiple city sharing single firestation that time we
            can mention base tenant id for the firestation.
        active:
          type: boolean
      description: Fire staion where we apply for fire NOC
    FireStationsToULBMapping:
      type: object
      properties:
        code:
          type: string
          description: Unique value for each entry in mdms data
        fireStationCode:
          type: string
          description: Unique value reffered to FireStations master
        boundaryCode:
          type: string
          description: Unique value reffered to boundary master, it will be dot seperated
            eg- pb.amritsar.SC4
        active:
          type: boolean
      description: Fire staion to ulb mapping
    FireNOCMetaInfo:
      type: object
      properties:
        code:
          type: string
          description: Unique value for each entry in mdms data
        firestationMapping:
          type: string
          description: Here we will mention whether its a fire to ulb mapping or fire
            to mohalla mapping, depends on this configuration we will filter firestation
            to ulb mapping.
        certificateValidity:
          type: string
          description: Here we will mention validity of mode eg- days/months/years.
        certificateEndOfValidity:
          type: string
          description: Here we will mention end of validity eg- calendar/financial
            year.
        overallSLA:
          type: number
          description: It will contain overall SLA for process
      description: This master used to maintain metadata of fire fireNOC
    UOM:
      type: object
      properties:
        code:
          type: string
          description: Unique value for each entry in mdms data
        active:
          type: boolean
      description: This master will have list of UOM's
    BuildingUOM:
      type: object
      properties:
        code:
          type: string
          description: Code of the unit code
        value:
          type: string
          description: Value entered for the uom
        isActiveUom:
          type: boolean
          description: Active uom for current usage type
        active:
          type: boolean
      description: This master will have list of UOM's
    Status:
      type: object
      properties:
        code:
          type: string
          description: Unique value for each entry in mdms data
        active:
          type: boolean
      description: This master will have list of Status
    PropertyType:
      type: object
      properties:
        code:
          type: string
          description: Unique value for each entry in mdms data
        active:
          type: boolean
      description: This master will have list of property type Single/Multiple building
    SLA:
      type: object
      properties:
        code:
          type: string
          description: Unique value for each entry in mdms data
        statusCode:
          type: string
          description: This is will be referene to status master
        noOfDays:
          type: string
          description: It will have status completion days.
        active:
          type: boolean
      description: This master will have mapping between Status to SLA
    ErrorRes:
      required:
      - ResponseInfo
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        Errors:
          type: array
          description: Error response array corresponding to Request Object array.
            In case of single object submission or _search related paths this may
            be an array of one error element
          items:
            $ref: '#/components/schemas/Error'
      description: All APIs will return ErrorRes in case of failure which will carry
        ResponseInfo as metadata and Error object as actual representation of error.
        In case of bulk apis, some apis may chose to return the array of Error objects
        to indicate individual failure.
    ResponseInfo:
      required:
      - apiId
      - status
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version
        ts:
          type: integer
          description: response time in epoch
          format: int64
        resMsgId:
          maxLength: 256
          type: string
          description: unique response message id (UUID) - will usually be the correlation
            id from the server
        msgId:
          maxLength: 256
          type: string
          description: message id of the request
        status:
          type: string
          description: status of request processing - to be enhanced in futuer to
            include INPROGRESS
          enum:
          - SUCCESSFUL
          - FAILED
      description: ResponseInfo should be used to carry metadata information about
        the response from the server. apiId, ver and msgId in ResponseInfo should
        always correspond to the same values in respective request's RequestInfo.
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: Error Code will be module specific error label/code to identiffy
            the error. All modules should also publish the Error codes with their
            specific localized values in localization service to ensure clients can
            print locale specific error messages. Example for error code would be
            User.NotFound to indicate User Not Found by User/Authentication service.
            All services must declare their possible Error Codes with brief description
            in the error response section of their API path.
        message:
          type: string
          description: English locale message of the error code. Clients should make
            a separate call to get the other locale description if configured with
            the service. Clients may choose to cache these locale specific messages
            to enhance performance with a reasonable TTL (May be defined by the localization
            service based on tenant + module combination).
        description:
          type: string
          description: Optional long description of the error to help clients take
            remedial action. This will not be available as part of localization service.
        params:
          type: array
          description: Some error messages may carry replaceable fields (say $1, $2)
            to provide more context to the message. E.g. Format related errors may
            want to indicate the actual field for which the format is invalid. Client's
            should use the values in the param array to replace those fields.
          items:
            type: string
      description: Error object will be returned as a part of reponse body in conjunction
        with ResponseInfo as part of ErrorResponse whenever the request processing
        status in the ResponseInfo is FAILED. HTTP return in this scenario will usually
        be HTTP 400.
    ErrorRes_2:
      required:
      - ResponseInfo
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo_2'
        Errors:
          type: array
          description: Error response array corresponding to Request Object array.
            In case of single object submission or _search related paths this may
            be an array of one error element
          items:
            $ref: '#/components/schemas/Error_2'
      description: All APIs will return ErrorRes in case of failure which will carry
        ResponseInfo as metadata and Error object as actual representation of error.
        In case of bulk apis, some apis may chose to return the array of Error objects
        to indicate individual failure.
    ResponseInfo_2:
      required:
      - apiId
      - status
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version
        ts:
          type: integer
          description: response time in epoch
          format: int64
        resMsgId:
          maxLength: 256
          type: string
          description: unique response message id (UUID) - will usually be the correlation
            id from the server
        msgId:
          maxLength: 256
          type: string
          description: message id of the request
        status:
          type: string
          description: status of request processing - to be enhanced in futuer to
            include INPROGRESS
          enum:
          - SUCCESSFUL
          - FAILED
      description: ResponseInfo should be used to carry metadata information about
        the response from the server. apiId, ver and msgId in ResponseInfo should
        always correspond to the same values in respective request's RequestInfo.
    Error_2:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: Error Code will be module specific error label/code to identiffy
            the error. All modules should also publish the Error codes with their
            specific localized values in localization service to ensure clients can
            print locale specific error messages. Example for error code would be
            User.NotFound to indicate User Not Found by User/Authentication service.
            All services must declare their possible Error Codes with brief description
            in the error response section of their API path.
        message:
          type: string
          description: English locale message of the error code. Clients should make
            a separate call to get the other locale description if configured with
            the service. Clients may choose to cache these locale specific messages
            to enhance performance with a reasonable TTL (May be defined by the localization
            service based on tenant + module combination).
        description:
          type: string
          description: Optional long description of the error to help clients take
            remedial action. This will not be available as part of localization service.
        params:
          type: array
          description: Some error messages may carry replaceable fields (say $1, $2)
            to provide more context to the message. E.g. Format related errors may
            want to indicate the actual field for which the format is invalid. Client's
            should use the values in the param array to replace those fields.
          items:
            type: string
      description: Error object will be returned as a part of reponse body in conjunction
        with ResponseInfo as part of ErrorResponse whenever the request processing
        status in the ResponseInfo is FAILED. HTTP return in this scenario will usually
        be HTTP 400.
    Address:
      type: object
      properties:
        tenantId:
          type: string
          description: Unique Identifier of the tenant to which user primarily belongs
        doorNo:
          type: string
          description: House number or door number.
        latitude:
          type: number
          description: latitude of the address
          format: double
        longitude:
          type: number
          description: longitude of the address
          format: double
        addressId:
          type: string
          description: System generated id for the address
          readOnly: true
        addressNumber:
          type: string
          description: House, Door, Building number in the address
        type:
          type: string
          description: Blood group of the user.
        addressLine1:
          type: string
          description: Apartment, Block, Street of the address
        addressLine2:
          type: string
          description: Locality, Area, Zone, Ward of the address
        landmark:
          type: string
          description: additional landmark to help locate the address
        city:
          type: string
          description: City of the address. Can be represented by the tenantid itself
        pincode:
          type: string
          description: PIN code of the address. Indian pincodes will usually be all
            numbers.
        detail:
          type: string
          description: more address detail as may be needed
        buildingName:
          maxLength: 64
          minLength: 2
          type: string
          description: Name of the building
        street:
          maxLength: 64
          minLength: 2
          type: string
          description: Street Name
        locality:
          $ref: '#/components/schemas/Boundary'
      description: |
        Representation of a address. Indiavidual APIs may choose to extend from this using allOf if more details needed to be added in their case.
    Boundary:
      required:
      - code
      - name
      type: object
      properties:
        code:
          type: string
          description: code of the boundary.
        name:
          type: string
          description: name of the boundary.
        label:
          type: string
          description: localized label for the boundry.
        latitude:
          type: string
          description: latitude of the boundary.
        longitude:
          type: string
          description: longitude of the boundary.
        children:
          type: array
          items:
            $ref: '#/components/schemas/Boundary'
        materializedPath:
          type: string
          description: materialized path of the boundary - this would be of the format
            tenantid.[code] from parentt till teh current boundary
          readOnly: true
    User:
      required:
      - active
      - gender
      - locale
      - mobileNumber
      - name
      - tenantId
      - type
      - userName
      type: object
      properties:
        id:
          type: integer
          description: The unique id an user.
          format: int64
        userName:
          maxLength: 64
          minLength: 1
          type: string
          description: The unique username used for user login.
        password:
          maxLength: 64
          type: string
          description: Password for user login.
          format: password
        salutation:
          maxLength: 5
          type: string
          description: The salutation of user name. Example- Mr, Miss, Mrs
        name:
          maxLength: 100
          minLength: 3
          type: string
          description: The full name of the user.
        gender:
          type: string
          description: Gender of the user.
        mobileNumber:
          maxLength: 10
          type: string
          description: Mobile number ofuser the user
        emailId:
          maxLength: 128
          type: string
          description: Email address of the user
        altContactNumber:
          maxLength: 10
          type: string
          description: Alternate contact number of the user
        pan:
          maxLength: 10
          type: string
          description: PAN number of the user
        aadhaarNumber:
          maxLength: 12
          pattern: '[0-9]'
          type: string
          description: Aadhaar number of the user
        permanentAddress:
          maxLength: 300
          type: string
          description: Permanent address of the user.
        permanentCity:
          maxLength: 300
          type: string
          description: City of the permanent address.
        permanentPincode:
          maxLength: 6
          type: string
          description: Permanent address pincode.
        correspondenceCity:
          maxLength: 50
          type: string
          description: City of the correspondence address.
        correspondencePincode:
          maxLength: 6
          type: string
          description: Permanent address pincode.
        correspondenceAddress:
          maxLength: 300
          type: string
          description: Correspondence address of the user.
        active:
          type: boolean
          description: True if the user is active and False if the user is inactive.
        dob:
          type: string
          description: Data of bith of the user in dd/mm/yyyy format.
          format: date
        pwdExpiryDate:
          type: string
          description: Date on which the password registered will expire.
          format: date
          readOnly: true
        locale:
          maxLength: 10
          type: string
          description: Value will be set to "en_IN".
        type:
          maxLength: 20
          type: string
          description: System set value internally. For employee value will be always
            "EMPLOYEE". For citizen value will be "CITIZEN".
        signature:
          type: string
          description: Image to be loaded for the signature of the employee
        accountLocked:
          type: boolean
          description: Set to True if account is locked after several incorrect password
            attempt. False if account is not locked.
        roles:
          type: array
          description: List of roles that are attached to the user.
          items:
            $ref: '#/components/schemas/Role'
        fatherOrHusbandName:
          maxLength: 100
          type: string
          description: Name of user's father or husband.
        bloodGroup:
          maxLength: 3
          type: string
          description: Blood group of the user.
        identificationMark:
          maxLength: 300
          type: string
          description: Any identification mark of the person.
        photo:
          type: string
          description: Image to be loaded for the photo of the user
        createdBy:
          type: integer
          description: Id of the user who created the record.
          format: int64
        createdDate:
          type: string
          description: Date on which the user master data was added into the system.
          format: date
        lastModifiedBy:
          type: integer
          description: Id of the user who last modified the record.
          format: int64
        lastModifiedDate:
          type: string
          description: Date on which the user master data was last modified.
          format: date
        otpReference:
          type: string
          description: This is the UUID token that we genarate as part of OTP.
        tenantId:
          type: string
          description: Unique Identifier of the tenant, Like AP, AP.Kurnool etc.
    Role:
      required:
      - name
      - tenantId
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the role.
          format: int64
        name:
          maxLength: 100
          minLength: 2
          type: string
          description: The Name of the Role.
        code:
          maxLength: 50
          minLength: 2
          type: string
          description: The Code of the Role.
        description:
          maxLength: 256
          type: string
          description: The description of the Role.
        createdBy:
          type: integer
          description: Id of the user who created the record.
          format: int64
        createdDate:
          type: string
          description: Date on which the role master data was added into the system.
          format: date
        lastModifiedBy:
          type: integer
          description: Id of the user who last modified the record.
          format: int64
        lastModifiedDate:
          type: string
          description: Date on which the role master data was last modified.
          format: date
        tenantId:
          type: string
          description: Unique Identifier of the tenant, Like AP, AP.Kurnool etc.
    AuditDetails:
      type: object
      properties:
        createdBy:
          type: string
          description: username (preferred) or userid of the user that created the
            object
        lastModifiedBy:
          type: string
          description: username (preferred) or userid of the user that last modified
            the object
        createdTime:
          type: integer
          description: epoch of the time object is created
          format: int64
        lastModifiedTime:
          type: integer
          description: epoch of the time object is last modified
          format: int64
      description: Collection of audit related fields used by most models
    RequestInfo:
      required:
      - action
      - apiId
      - msgId
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version - for HTTP based request this will be same as used
            in path
        ts:
          type: integer
          description: time in epoch
          format: int64
        action:
          maxLength: 32
          type: string
          description: API action to be performed like _create, _update, _search (denoting
            POST, PUT, GET) or _oauth etc
        did:
          maxLength: 1024
          type: string
          description: Device ID from which the API is called
        key:
          maxLength: 256
          type: string
          description: API key (API key provided to the caller in case of server to
            server communication)
        msgId:
          maxLength: 256
          type: string
          description: Unique request message id from the caller
        requesterId:
          maxLength: 256
          type: string
          description: UserId of the user calling
        authToken:
          type: string
          description: //session/jwt/saml token/oauth token - the usual value that
            would go into HTTP bearer token
        userInfo:
          $ref: '#/components/schemas/UserInfo'
        correlationId:
          type: string
          readOnly: true
      description: RequestInfo should be used to carry meta information about the
        requests to the server as described in the fields below. All eGov APIs will
        use requestinfo as a part of the request body to carry this meta information.
        Some of this information will be returned back from the server as part of
        the ResponseInfo in the response body to ensure correlation.
    UserInfo:
      required:
      - primaryrole
      - tenantId
      - userName
      type: object
      properties:
        tenantId:
          type: string
          description: Unique Identifier of the tenant to which user primarily belongs
        uuid:
          type: string
          description: System Generated User id of the authenticated user.
        userName:
          type: string
          description: Unique user name of the authenticated user
        password:
          type: string
          description: password of the user.
        idToken:
          type: string
          description: This will be the OTP.
        mobile:
          type: string
          description: mobile number of the autheticated user
        email:
          type: string
          description: email address of the authenticated user
        primaryrole:
          type: array
          description: List of all the roles for the primary tenant
          items:
            $ref: '#/components/schemas/Role_2'
        additionalroles:
          type: array
          description: array of additional tenantids authorized for the authenticated
            user
          items:
            $ref: '#/components/schemas/TenantRole'
      description: This is acting ID token of the authenticated user on the server.
        Any value provided by the clients will be ignored and actual user based on
        authtoken will be used on the server.
    Role_2:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 64
          type: string
          description: Unique name of the role
        code:
          maxLength: 64
          type: string
          description: Unique code of the role
        description:
          type: string
          description: brief description of the role
      description: |
        minimal representation of the Roles in the system to be carried along in UserInfo with RequestInfo meta data. Actual authorization service to extend this to have more role related attributes
    TenantRole:
      required:
      - roles
      - tenantId
      type: object
      properties:
        tenantId:
          type: string
          description: tenantid for the tenant
        roles:
          type: array
          description: Roles assigned for a particular tenant - array of role codes/names
          items:
            $ref: '#/components/schemas/Role_2'
      description: User role carries the tenant related role information for the user.
        A user can have multiple roles per tenant based on the need of the tenant.
        A user may also have multiple roles for multiple tenants.
  parameters:
    pageSize:
      name: pageSize
      in: query
      description: Number of records returned.
      schema:
        multipleOf: 10.0
        maximum: 100
        exclusiveMaximum: false
        minimum: 0
        exclusiveMinimum: true
        type: integer
        default: 20
    pageNumber:
      name: pageNumber
      in: query
      description: Page number
      schema:
        type: integer
        default: 1
    sortProperty:
      name: sort
      in: query
      description: Fire NOC results will be sorted by fireNOCNumber ascending by default
        if this parameter is not provided.
      style: pipeDelimited
      schema:
        maxItems: 3
        minItems: 1
        uniqueItems: true
        type: array
        items:
          pattern: '[-+](fireNOCNumber|fireNOCType|ownerName)'
          type: string
        default: '["+fireNOCNumber"]'
x-api-id: org.egov.firenoc.services
x-common-path: https://raw.githubusercontent.com/egovernments/egov-services/master/docs/common/contracts/v1-1-1.yml
