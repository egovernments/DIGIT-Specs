openapi: 3.0.1
info:
  title: Common Object Definitions
  description: Definitions of common objects used across the modules. These objects
    will/may be commonly used by all eGov API deicitions. There are no paths defined
    in this spec as these objects cannot be used solely on their own.
  contact:
    name: eGov
    email: info@egovernments.org
  version: 1.0.0
servers:
- url: https
paths: {}
components:
  schemas:
    RequestInfo:
      required:
      - action
      - apiId
      - msgId
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version - for HTTP based request this will be same as used
            in path
        ts:
          type: integer
          description: time in epoch
          format: int64
        action:
          maxLength: 32
          type: string
          description: API action to be performed like _create, _update, _search (denoting
            POST, PUT, GET) or _oauth etc
        did:
          maxLength: 1024
          type: string
          description: Device ID from which the API is called
        key:
          maxLength: 256
          type: string
          description: API key (API key provided to the caller in case of server to
            server communication)
        msgId:
          maxLength: 256
          type: string
          description: Unique request message id from the caller
        requesterId:
          maxLength: 256
          type: string
          description: UserId of the user calling
        authToken:
          type: string
          description: //session/jwt/saml token/oauth token - the usual value that
            would go into HTTP bearer token
        userInfo:
          $ref: '#/components/schemas/User'
        correlationId:
          type: string
          readOnly: true
      description: RequestInfo should be used to carry meta information about the
        requests to the server as described in the fields below. All eGov APIs will
        use requestinfo as a part of the request body to carry this meta information.
        Some of this information will be returned back from the server as part of
        the ResponseInfo in the response body to ensure correlation.
    User:
      required:
      - roles
      - tenantId
      - userName
      type: object
      properties:
        tenantId:
          type: string
          description: Unique Identifier of the tenant to which user primarily belongs
        id:
          type: integer
          description: User id of the authenticated user. Will be deprecated in future
          format: int32
        uuid:
          type: string
          description: UUID of the user
        userName:
          type: string
          description: Unique user name of the authenticated user
        mobileNumber:
          type: string
          description: mobile number of the autheticated user
        emailId:
          type: string
          description: email address of the authenticated user
        roles:
          type: array
          description: List of all the roles
          items:
            $ref: '#/components/schemas/Role'
        salutation:
          type: string
          description: Salutation of the authenticated user
        name:
          type: string
          description: Name of the authenticated user
        gender:
          type: string
          description: Gender of the authenticated user
        alternateMobileNumber:
          type: string
          description: Alternate mobile number of the authenticated user
        altContactNumber:
          type: string
          description: Alternate Contact number of the authenticated user
        pan:
          type: string
          description: Pan details of the authenticated user
        aadhaarNumber:
          type: string
          description: Aadhaar number of the authenticated user
        permanentAddress:
          maxLength: 300
          type: string
          description: Permanent address of the user.
        permanentCity:
          maxLength: 300
          type: string
          description: City of the permanent address.
        permanentPincode:
          maxLength: 6
          type: string
        correspondenceCity:
          maxLength: 50
          type: string
          description: City of the correspondence address.
        correspondencePincode:
          maxLength: 6
          type: string
          description: Permanent address pincode.
        correspondenceAddress:
          maxLength: 300
          type: string
          description: Correspondence address of the user.
        active:
          type: boolean
          description: True if the user is active and False if the user is inactive.
        locale:
          maxLength: 10
          type: string
          description: Value will be set to "en_IN".
        type:
          maxLength: 20
          type: string
          description: System set value internally. For employee value will be always
            "EMPLOYEE". For citizen value will be "CITIZEN".
        accountLocked:
          type: boolean
          description: Set to True if account is locked after several incorrect password
        accountLockedDate:
          type: integer
          format: int64
          description: Date when account is locked after several incorrect password
        fatherOrHusbandName:
          maxLength: 100
          type: string
          description: Name of user's father or husband.
        relationship:
          maxLength: 20
          type: string
          description: Relationship of user with the guardian. "FATHER, MOTHER, HUSBAND OR OTHER"
        signature:
          type: string
          description: Image to be loaded for the signature of the employee
        bloodGroup:
          maxLength: 3
          type: string
          description: Blood group of the user.
        photo:
          type: string
          description: Image to be loaded for the photo of the user
        identificationMark:
          type: string
          description: Any identification mark of user.
        createdBy:
          type: integer
          description: Id of the user who created the record.
          format: int64
        password:
          type: "string"
          description: "password of the user."
        otpReference:
          type: string
          description: This is the UUID token that we genarate as part of OTP.
        lastModifiedBy:
          type: integer
          description: Id of the user who last modified the record.
          format: int64  
        createdDate:
          type: string
          description: Date on which the user master data was added into the system.
          format: date
        lastModifiedDate:
          type: string
          description: Date on which the user master data was last modified.
          format: date
        dob:
          type: integer
          format: int64
          description: Date of birth of the User
        pwdExpiryDate:
          type: integer
          format: int64
      description: This is acting ID token of the authenticated user on the server.
        Any value provided by the clients will be ignored and actual user based on
        authtoken will be used on the server.
    Role:
      required:
      - tenantId
      type: object
      properties:
        tenantId:
          type: string
          description: TenantId for which the role is given
        id:
          type: string
          description: id of the role
          format: int32
        name:
          maxLength: 64
          type: string
          description: Unique name of the role
        description:
          type: string
          description: brief description of the role
      description: |
        minimal representation of the Roles in the system to be carried along in UserInfo with RequestInfo meta data. Actual authorization service to extend this to have more role related attributes
    ResponseInfo:
      required:
      - apiId
      - status
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version
        ts:
          type: integer
          description: response time in epoch
          format: int64
        resMsgId:
          maxLength: 256
          type: string
          description: unique response message id (UUID) - will usually be the correlation
            id from the server
        msgId:
          maxLength: 256
          type: string
          description: message id of the request
        status:
          type: string
          description: status of request processing - to be enhanced in futuer to
            include INPROGRESS
          enum:
          - SUCCESSFUL
          - FAILED
      description: ResponseInfo should be used to carry metadata information about
        the response from the server. apiId, ver and msgId in ResponseInfo should
        always correspond to the same values in respective request's RequestInfo.
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: Error Code will be module specific error label/code to identiffy
            the error. All modules should also publish the Error codes with their
            specific localized values in localization service to ensure clients can
            print locale specific error messages. Example for error code would be
            User.NotFound to indicate User Not Found by User/Authentication service.
            All services must declare their possible Error Codes with brief description
            in the error response section of their API path.
        message:
          type: string
          description: English locale message of the error code. Clients should make
            a separate call to get the other locale description if configured with
            the service. Clients may choose to cache these locale specific messages
            to enhance performance with a reasonable TTL (May be defined by the localization
            service based on tenant + module combination).
        description:
          type: string
          description: Optional long description of the error to help clients take
            remedial action. This will not be available as part of localization service.
        params:
          type: array
          description: Some error messages may carry replaceable fields (say $1, $2)
            to provide more context to the message. E.g. Format related errors may
            want to indicate the actual field for which the format is invalid. Client's
            should use the values in the param array to replace those fields.
          items:
            type: string
      description: Error object will be returned as a part of reponse body in conjunction
        with ResponseInfo as part of ErrorResponse whenever the request processing
        status in the ResponseInfo is FAILED. HTTP return in this scenario will usually
        be HTTP 400.
    ErrorRes:
      required:
      - ResponseInfo
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        Errors:
          type: array
          description: Error response array corresponding to Request Object array.
            In case of single object submission or _search related paths this may
            be an array of one error element
          items:
            $ref: '#/components/schemas/Error'
      description: All APIs will return ErrorRes in case of failure which will carry
        ResponseInfo as metadata and Error object as actual representation of error.
        In case of bulk apis, some apis may chose to return the array of Error objects
        to indicate individual failure.
    Address:
      type: object
      properties:
        tenantId:
          type: string
          description: Unique Identifier of the tenant to which user primarily belongs
        latitude:
          type: number
          description: latitude of the address
          format: double
        longitude:
          type: number
          description: longitude of the address
          format: double
        addressId:
          type: string
          description: System generated id for the address
          readOnly: true
        addressNumber:
          type: string
          description: House, Door, Building number in the address
        addressLine1:
          type: string
          description: Apartment, Block, Street of the address
        addressLine2:
          type: string
          description: Locality, Area, Zone, Ward of the address
        landmark:
          type: string
          description: additional landmark to help locate the address
        city:
          type: string
          description: City of the address. Can be represented by the tenantid itself
        pincode:
          type: string
          description: PIN code of the address. Indian pincodes will usually be all
            numbers.
        detail:
          type: string
          description: more address detail as may be needed
      description: |
        Representation of a address. Indiavidual APIs may choose to extend from this using allOf if more details needed to be added in their case.
    AuditDetails:
      type: object
      properties:
        createdBy:
          type: string
          description: username (preferred) or userid of the user that created the
            object
        lastModifiedBy:
          type: string
          description: username (preferred) or userid of the user that last modified
            the object
        createdTime:
          type: integer
          description: epoch of the time object is created
          format: int64
        lastModifiedTime:
          type: integer
          description: epoch of the time object is last modified
          format: int64
      description: Collection of audit related fields used by most models
  parameters:
    tenantId:
      name: tenantId
      in: query
      description: Unique id for a tenant.
      required: true
      schema:
        type: string
        format: varchar
    lastChangedSince:
      name: lastChangedSince
      in: query
      description: |
        epoch of the time since when the changes on the object should be picked up. Search results from this parameter should include both newly created objects since this time as well as any modified objects since this time. This criterion is included to help polling clients to get the changes in system since a last time they synchronized with the platform.
      schema:
        type: integer
        format: int64
  requestBodies:
    requestInfo:
      description: Parameter to carry Request metadata in the request body
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/RequestInfo'
      required: false