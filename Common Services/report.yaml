openapi: 3.0.1
info:
  title: Report Infrastructure
  description: |
    API specs to enable configurable reports in needed modules - the paths here will become subpath for the given modules base path. Please note that this cannot run as a standalone service and needs to be included in any module that requires configuration based reports. This module will then add aditional report sub-paths to existing module path and provide the sub paths to get report metadata and report data

    Mainly designed to take care of RDBMS/SQL based reports
  contact:
    name: info
  version: 1.0.0
servers:
- url: /report
paths:
  /{moduleName}/{version}/metadata/_get:
    post:
      tags:
        - Report Meta
      summary: createv1
      operationId: createv1UsingPOST
      parameters:
        - name: moduleName
          in: path
          description: moduleName
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataRequest'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /{moduleName}/{version}/_get:
    post:
      tags:
        - Report Meta
      summary: getReportDatav1
      operationId: getReportDatav1UsingPOST
      parameters:
        - name: moduleName
          in: path
          description: moduleName
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportRequest'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found        
  /metadata/_get:
    post:
      deprecated: true 
      tags:
      - Report Meta
      summary: Metadata API for report definition
      description: |
        Gets the report description, column definitions, labels and types.
      requestBody:
        description: Report request
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MetadataRequest'
        required: true
      responses:
        200:
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetadataResponse'
        400:
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReportErrorRes'
      x-codegen-request-body-name: reportRequest
  /_get:
    post:
      deprecated: true
      tags:
      - Report
      summary: Search API for report data
      description: |
        Get the report data based on the given search parameters.
      requestBody:
        description: Report request
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ReportRequest'
        required: true
      responses:
        200:
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReportResponse'
        400:
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReportErrorRes'
      x-codegen-request-body-name: reportRequest
components:
  schemas:
    MetadataRequest:
      required:
      - reportName
      - requestInfo
      - tenantId
      type: object
      properties:
        requestInfo:
          $ref: '#/components/schemas/RequestInfo'
        tenantId:
          type: string
          description: tenantId for which the report is needed
        reportName:
          type: string
          description: |
            name of the report. A tenant specific report can be defined with tenantId as the prefix of the report name. So if the system finds two reports - report1 and mytenant.report1 and the tenantId for this request is mytenant then report definition mytenant.report1 will be picked
      description: Request object to fetch the report data
    MetadataResponse:
      type: object
      properties:
        requestInfo:
          $ref: '#/components/schemas/ResponseInfo'
        tenantId:
          type: string
          description: tenantId for which the report is needed
        reportDetails:
          $ref: '#/components/schemas/ReportMetadata'
      description: Response to the metadata request
    ReportRequest:
      allOf:
      - $ref: '#/components/schemas/MetadataRequest'
      - type: object
        properties:
          searchParams:
            type: array
            description: |
              array of search parameters to use in report query
            items:
              $ref: '#/components/schemas/SearchParam'
        description: Request object to fetch the report data
    ReportResponse:
      type: object
      properties:
        requestInfo:
          $ref: '#/components/schemas/ResponseInfo'
        reportHeader:
          type: array
          description: Array of report columns
          items:
            $ref: '#/components/schemas/ColumnDetail'
        ttl:
          type: integer
          description: UTC epoch upto which report data can be cached
          format: int64
        reportData:
          type: array
          description: two dimensional array containing the report data
          items:
            type: array
            items:
              type: object
              properties: {}
      description: Response object that has fetched report data
    ColumnDef:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: column names of the report
      description: Header information for the report
    SearchParam:
      allOf:
      - $ref: '#/components/schemas/ColumnDef'
      - type: object
        properties:
          input:
            type: object
            properties: {}
            description: |
              User provided input of this parameter that will be used in query. Please note that value will be format checked against the value definition of this parameter in report definition. This field has been made an object so that multiple values from things like multivalue list can be accepted.
    ColumnDetail:
      allOf:
      - $ref: '#/components/schemas/ColumnDef'
      - required:
        - type
        type: object
        properties:
          label:
            type: string
            description: localization label for the column. In case label is not provided,
              name would be used as a label.
          type:
            type: string
            description: |
              column type to help the consumer. EPOCH means time being carried over in epoch format, while date means time in given display format
              URL - will be used to indicate taht the column value is basically a URL to some other resource
            enum:
            - number
            - string
            - date
            - datetime
            - epoch
            - url
            - singlevaluelist
            - multivaluelist
          defaultValue:
            type: object
            properties: {}
            description: |
              any default value for the column if the column type is number, string, date, datetime, epoch or URL
              collection contaning possible list value pairs for singlevaluelist and multivaluelist
              the parameterized next click URL in case of drill down - the value inside {} needs to be replaced with the actual value of the column with that name
          isMandatory:
            type: boolean
            default: true
          showColumn:
            type: boolean
            description: |
              whether to display the column value on the page, useful in cases like drill downs where teh value is needed for next search but is not meaningful to be shown to the user
            default: true
    ReportMetadata:
      type: object
      properties:
        reportName:
          type: string
          description: |
            name of the report. A tenant specific report can be defined with tenantId as the prefix of the report name. So if the system finds two reports - report1 and mytenant.report1 and the tenantId for this request is mytenant then r eport definition mytenant.report1 will be picked.

            Please note that by convention reportname.title and reportname.summary will be teh localization key for the report title and brief description.
        summary:
          type: object
          description: |
            Brief description about the report and its usage. E.g. "This report gives you a list of active reources within the date range provided in the search criteria"
        reportHeader:
          type: array
          description: |
            List of display columns in the report
          items:
            $ref: '#/components/schemas/ColumnDetail'
        searchParams:
          type: array
          description: |
            array of search parameters to use in report query
          items:
            $ref: '#/components/schemas/ColumnDetail'
      description: meta information about the report
    ReportErrorRes:
      allOf:
      - $ref: '#/components/schemas/ErrorRes'
      - type: object
        properties:
          codes:
            type: string
            enum:
            - ReportDefNotFound
            - InvalidSearchParams
            - TenantNotFound
    SourceColumn:
      description: |
        This is the column definition for the purpose of defining the report. Please note that in case of external column (basicaly columns fetched from external service) dependsOn indicates the internal column which needs to be send as the paarmeter for teh external url to respond with result that will contain the value at the configured JSONpath.
      allOf:
      - $ref: '#/components/schemas/ColumnDetail'
      - required:
        - colName
        - source
        type: object
        properties:
          source:
            type: string
            description: "Table/Index path to which the column belongs  \n"
          colName:
            type: string
            description: |
              column name in the table/index
          linkPattern:
            type: string
            description: |
              pattern to indicate to UI about additional serach param names and their values
              _parent?reportName={drillDownReportName}&columnname={sourceColumnValue}&columnname={sourceColumnValue}
          isExternal:
            type: boolean
            description: |
              flag to indicate that this column value can be fetched from external service. This will be useful when we start segragating the services in their own physical data stores
            default: false
          url:
            type: string
            description: |
              parameterized URL to external system if isExternal is true - Please note that all placeholders parameters in the URL (represented within {} e.g. {username}) should match one available within the report definition sourceColumn or searchParam as the case may be.
          jsonPath:
            type: string
            description: |
              JSONPath of the field in the response JSON from the external service
          dependsOn:
            $ref: '#/components/schemas/SourceColumn'
    SearchColumn:
      description: |
        This is the column definition for the purpose of defining the search columns
      allOf:
      - $ref: '#/components/schemas/ColumnDetail'
      - required:
        - colName
        - source
        type: object
        properties:
          source:
            type: string
            description: |
              Table/Index path to which the column belongsor the URL from which to fecth the data if it is a singlevalue or multivalue list
          colName:
            type: string
            description: |
              column name in the table/index
          pattern:
            type: string
            description: "1. display format for the column - in case of epoch type\
              \ datatypes. \n2. In case of single/multivalue list this will be pipe\
              \ separated url|keyJSONPath|valueJSONPath (URL to fetch the list values,\
              \ jsonPath of the key value, jsonPath of what to display)\n  2.1 In\
              \ case the URL wants the values to be statically defined as a list use\
              \ list://pipe_separated_values!\n3. In case the other datatype - this\
              \ will be the parametarized URL that consumer can then use to call the\
              \ next drill down/action - for drill down use _parent?key=value&key=value\
              \ (where key would be name of additional params and value search value\
              \ to construct new search params)\n"
    ReportDefinition:
      required:
      - query
      - reportName
      - searchParams
      - sourceColumns
      - summary
      - version
      type: object
      properties:
        reportName:
          type: string
          description: |
            name of the report. A tenant specific report can be defined with tenantId as the prefix of the report name. So if the system finds two reports - report1 and mytenant.report1 and the tenantId for this request is mytenant then report definition mytenant.report1 will be picked.

            Please note that by convention reportname.title and reportname.summary will be the localization key for the report title and brief description.
        summary:
          type: string
          description: |
            Brief description about the report and its usage. E.g. "This report gives you a list of active reources within the date range provided in the search criteria"
        version:
          type: string
          description: |
            Version of the report farmework - this will help in enhancing the reporting framework in phased manner - planning to support upto two recent versions of backward compatibility. Versioning scheme is purely number based and decided by the framework and not indivdual Report definitions
        query:
          type: string
          description: |
            SQL style search clause with display column mapping and replaceable search parameters. Please note that all placeholders column in the query (represented within {} e.g. {username}) should match corresponding sourceColumn or searchParam as the case may be.
        sourceColumns:
          type: array
          description: |
            list of columns to to select from the source tables. This should then correspond to the list of report columns that are send back to the caller in report metadata. Please note that all columns must have one one of the sources from above list as their source or the report definition will not be loaded.
          items:
            $ref: '#/components/schemas/SourceColumn'
        searchParams:
          type: array
          description: "list of the supported parameters for search. \n"
          items:
            $ref: '#/components/schemas/SearchColumn'
        linkPattern:
          type: string
          description: |
            pattern to indicate to UI about additional serach param names and their values
            _parent?reportName={drillDownReportName}&columnname={sourceColumnValue}&columnname={sourceColumnValue}
      description: |
        Combination of below properties provides the decription of a report that can be generically obtained from the framework. Please note that in this version, only reports out of RDBMS are supported - but later the framework will be enhanced to support reports out of RDBMS/Cross service non join reports from RDBMS/Elastic search and mashups.
    RequestInfo:
      required:
      - action
      - apiId
      - msgId
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version - for HTTP based request this will be same as used
            in path
        ts:
          type: integer
          description: time in epoch
          format: int64
        action:
          maxLength: 32
          type: string
          description: API action to be performed like _create, _update, _search (denoting
            POST, PUT, GET) or _oauth etc
        did:
          maxLength: 1024
          type: string
          description: Device ID from which the API is called
        key:
          maxLength: 256
          type: string
          description: API key (API key provided to the caller in case of server to
            server communication)
        msgId:
          maxLength: 256
          type: string
          description: Unique request message id from the caller
        requesterId:
          maxLength: 256
          type: string
          description: UserId of the user calling
        authToken:
          type: string
          description: //session/jwt/saml token/oauth token - the usual value that
            would go into HTTP bearer token
        userInfo:
          $ref: '#/components/schemas/UserInfo'
        correlationId:
          type: string
          readOnly: true
      description: RequestInfo should be used to carry meta information about the
        requests to the server as described in the fields below. All eGov APIs will
        use requestinfo as a part of the request body to carry this meta information.
        Some of this information will be returned back from the server as part of
        the ResponseInfo in the response body to ensure correlation.
    UserInfo:
      required:
      - primaryrole
      - tenantId
      - userName
      type: object
      properties:
        tenantId:
          type: string
          description: Unique Identifier of the tenant to which user primarily belongs
        id:
          type: integer
          description: User id of the authenticated user. Will be deprecated in future
          format: int32
        userName:
          type: string
          description: Unique user name of the authenticated user
        mobile:
          type: string
          description: mobile number of the autheticated user
        email:
          type: string
          description: email address of the authenticated user
        primaryrole:
          type: array
          description: List of all the roles for the primary tenant
          items:
            $ref: '#/components/schemas/Role'
        additionalroles:
          type: array
          description: array of additional tenantids authorized for the authenticated
            user
          items:
            $ref: '#/components/schemas/TenantRole'
      description: This is acting ID token of the authenticated user on the server.
        Any value provided by the clients will be ignored and actual user based on
        authtoken will be used on the server.
    Role:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 64
          type: string
          description: Unique name of the role
        description:
          type: string
          description: brief description of the role
      description: |
        minimal representation of the Roles in the system to be carried along in UserInfo with RequestInfo meta data. Actual authorization service to extend this to have more role related attributes
    TenantRole:
      required:
      - roles
      - tenantId
      type: object
      properties:
        tenantId:
          type: string
          description: tenantid for the tenant
        roles:
          type: array
          description: Roles assigned for a particular tenant - array of role codes/names
          items:
            $ref: '#/components/schemas/Role'
      description: User role carries the tenant related role information for the user.
        A user can have multiple roles per tenant based on the need of the tenant.
        A user may also have multiple roles for multiple tenants.
    ResponseInfo:
      required:
      - apiId
      - status
      - ts
      - ver
      type: object
      properties:
        apiId:
          maxLength: 128
          type: string
          description: unique API ID
        ver:
          maxLength: 32
          type: string
          description: API version
        ts:
          type: integer
          description: response time in epoch
          format: int64
        resMsgId:
          maxLength: 256
          type: string
          description: unique response message id (UUID) - will usually be the correlation
            id from the server
        msgId:
          maxLength: 256
          type: string
          description: message id of the request
        status:
          type: string
          description: status of request processing - to be enhanced in futuer to
            include INPROGRESS
          enum:
          - SUCCESSFUL
          - FAILED
      description: ResponseInfo should be used to carry metadata information about
        the response from the server. apiId, ver and msgId in ResponseInfo should
        always correspond to the same values in respective request's RequestInfo.
    ErrorRes:
      required:
      - ResponseInfo
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        Errors:
          type: array
          description: Error response array corresponding to Request Object array.
            In case of single object submission or _search related paths this may
            be an array of one error element
          items:
            $ref: '#/components/schemas/Error'
      description: All APIs will return ErrorRes in case of failure which will carry
        ResponseInfo as metadata and Error object as actual representation of error.
        In case of bulk apis, some apis may chose to return the array of Error objects
        to indicate individual failure.
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: Error Code will be module specific error label/code to identiffy
            the error. All modules should also publish the Error codes with their
            specific localized values in localization service to ensure clients can
            print locale specific error messages. Example for error code would be
            User.NotFound to indicate User Not Found by User/Authentication service.
            All services must declare their possible Error Codes with brief description
            in the error response section of their API path.
        message:
          type: string
          description: English locale message of the error code. Clients should make
            a separate call to get the other locale description if configured with
            the service. Clients may choose to cache these locale specific messages
            to enhance performance with a reasonable TTL (May be defined by the localization
            service based on tenant + module combination).
        description:
          type: string
          description: Optional long description of the error to help clients take
            remedial action. This will not be available as part of localization service.
        params:
          type: array
          description: Some error messages may carry replaceable fields (say $1, $2)
            to provide more context to the message. E.g. Format related errors may
            want to indicate the actual field for which the format is invalid. Client's
            should use the values in the param array to replace those fields.
          items:
            type: string
      description: Error object will be returned as a part of reponse body in conjunction
        with ResponseInfo as part of ErrorResponse whenever the request processing
        status in the ResponseInfo is FAILED. HTTP return in this scenario will usually
        be HTTP 400.