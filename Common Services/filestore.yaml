openapi: 3.0.1
info:
  title: Filestore service APIs
  description: |
    APIs available for filestore service
      -  Uploads different kinds of files to server including images and different document types.
  contact:
    name: eGovernments Foundation
    email: contacts@egovernments.org
  version: 2.0.0
servers:
- url: /filestore/v1
paths:
  /files:
    post:
      tags:
      - Upload File
      summary: Uploads different kinds of files to server.
      description: The endpoint for uploading file in the system.
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - module
              properties:
                requestInfo:
                  allOf:
                    - $ref: 'https://raw.githubusercontent.com/egovernments/DIGIT-Specs/master/Common%20Services/common-contract.yaml#/components/schemas/RequestInfo'
                    - type: string
                file:
                  type: string
                  description: The file to upload.
                  format: binary
                tenantId:
                  type: string
                  description: Unique ulb identifier.
                module:
                  type: string
                  description: module name.
                tag:
                  type: string
                  description: tag name.
        required: true
      responses:
        200:
          description: Success response with filestoreid and tenantid.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UploadFileResponse'
        400:
          description: Error response in case of failures.
          content:
            '*/*':
              schema:
                $ref: 'https://raw.githubusercontent.com/egovernments/DIGIT-Specs/master/Common%20Services/common-contract.yaml#/components/schemas/ErrorRes'
  /files/url:
    get:
      tags:
      - Search
      summary: Search file url based on tenantid and filestoreid.
      description: Search file url.
      parameters:
      - name: tenantId
        in: query
        description: Unique id for a tenant.
        required: true
        schema:
          type: string
          format: varchar
      - name: fileStoreIds
        in: query
        description: Unique filestoreids.
        required: true
        schema:
          type: string
      responses:
        200:
          description: List of urls to access the uploaded file which is map to particular
            fielstoreid.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FilestoreIdResponse'
        400:
          description: Error response in case of failures.
          content:
            '*/*':
              schema:
                $ref: 'https://raw.githubusercontent.com/egovernments/DIGIT-Specs/master/Common%20Services/common-contract.yaml#/components/schemas/ErrorRes'
  /files/tag:
    get:
      tags:
      - Search
      summary: Search file url based on tenantid and tag name.
      description: Search file url.
      parameters:
      - name: tenantId
        in: query
        description: Unique id for a tenant.
        required: true
        schema:
          type: string
          format: varchar
      - name: tag
        in: query
        description: tag name.
        required: true
        schema:
          type: string
      responses:
        200:
          description: List of urls to access the uploaded file which is map to particular
            tag name.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TagFileResponse'
        400:
          description: Error response in case of failures.
          content:
            '*/*':
              schema:
                $ref: 'https://raw.githubusercontent.com/egovernments/DIGIT-Specs/master/Common%20Services/common-contract.yaml#/components/schemas/ErrorRes'
  /files/metaData:
    get:
      tags:
      - Search
      summary: Get metadata of file based on tenantId and filestoreId.
      description: metadata of file.
      parameters:
      - name: tenantId
        in: query
        description: Unique id for a tenant.
        required: true
        schema:
          type: string
          format: varchar
      - name: fileStoreId
        in: query
        description: Unique fileStoreId.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Metadata of file map to particulare filestoreId.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MetaDataResponse'
        400:
          description: Error response in case of failures.
          content:
            '*/*':
              schema:
                $ref: 'https://raw.githubusercontent.com/egovernments/DIGIT-Specs/master/Common%20Services/common-contract.yaml#/components/schemas/ErrorRes'
  /files/id:
    get:
      tags:
      - Search
      summary: Search file url based on tenantid and filestoreid.
      description: Search file url.
      parameters:
      - name: tenantId
        in: query
        description: Unique id for a tenant.
        required: true
        schema:
          type: string
          format: varchar
      - name: fileStoreId
        in: query
        description: fileStore id.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Return file binary.
          content: {}
        400:
          description: Error response in case of failures.
          content:
            '*/*':
              schema:
                $ref: 'https://raw.githubusercontent.com/egovernments/DIGIT-Specs/master/Common%20Services/common-contract.yaml#/components/schemas/ErrorRes'
components:
  schemas:
    FilestoreIdResponse:
      required:
      - filestoreId
      type: object
      properties:
        filestoreId:
          type: array
          items:
            type: string
      description: A list of values
    UploadFileResponse:
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/UploadFile'
    TagFileResponse:
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/TagFile'
    MetaDataResponse:
      type: object
      properties:
        fileName:
          type: string
          description: file name.
        contetntType:
          type: string
          description: contetnt type of file.
        tenantId:
          type: string
          description: Unique ulb identifier.
        resource:
          type: string
          description: resource.
        fileSize:
          type: string
          description: file size.
      description: Response data cobtains details of files.
    UploadFile:
      type: object
      properties:
        fileStoreId:
          type: string
          description: filestore id of the particular file.
        tenantId:
          type: string
          description: Unique ulb identifier.
      description: Upload file response data with filestoreid and tenantid.
    TagFile:
      type: object
      properties:
        url:
          type: string
          description: url to access the particular file belong to the tag.
        contetntType:
          type: string
          description: contetnt type of file.
      description: Upload file response data with url and contetnt type of file.
