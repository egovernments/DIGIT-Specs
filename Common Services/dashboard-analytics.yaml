openapi: 3.0.1
info:
  title: DSS Analytics APIs
  description: "APIs for DSS Analytics Dashboard will mainly consist of 2 APIs. \n\
    The one which is used to get Configuration based on which the Dashboard has to\
    \ be painted. \nThe other one will be the API which gets the data which is needed\
    \ for the Visualization to paint different Graphs. \n"
  version: 1.0.0
servers:
- url: https://dev.digit.org/dashboard/[APIEndPoint]
paths:
  /getDashboardConfig/{dashboardId}:
    get:
      tags:
      - Dashboard
      summary: API to get the Dashboard Configuration which gives the Visualizations
        and Layout to paint
      description: This endpoint will pass the Dashboard ID from the URL to this API
        and will get the Dashboard Configuration from the backend which will have
        the details of the Visualization Layouts which are to be designed in this
        Dashboard.
      parameters:
      - name: dashboardId
        in: path
        description: ID of the Dashboard
        required: true
        schema:
          type: string
      responses:
        200:
          description: Response for Success State of the API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardConfigResponse'
        400:
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: 'https://raw.githubusercontent.com/egovernments/DIGIT-Specs/master/Common%20Services/common-contract.yaml#/components/schemas/ErrorRes'
  /getChartV2:
    post:
      tags:
      - Order
      summary: Get Chart API will be responding with the Data for each visualization
        based on the Chart ID which has been sent
      description: Based on the Chart ID and the Visualization Type and the Request
        Dates and Filters, the API will aggregate the data and give the data which
        needs to be painted on Visualization Charts
      requestBody:
        description: This request object contains the Visualization for which the
          data has to be served.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DashboardRequest'
        required: true
      responses:
        200:
          description: Response for Success State of the API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardResponse'
        400:
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: 'https://raw.githubusercontent.com/egovernments/DIGIT-Specs/master/Common%20Services/common-contract.yaml#/components/schemas/ErrorRes'
      x-codegen-request-body-name: order
components:
  schemas:
    Chart:
      type: object
      properties:
        id:
          type: integer
          description: This field holds the Unique Identifier of the Charts
          format: int64
        name:
          type: string
          description: Name of the Chart
        code:
          type: string
          description: Unique Code to recognize the Chart
        chartType:
          type: string
          description: Type of the Chart or Graph which will be painted on the UI
            for this partifular Chart Data is represented here.
          format: enum - PIE - BAR - METRIC - LINE - TABLE
        filter:
          type: object
          additionalProperties:
            type: string
          description: A map of String and and String to hold the Filters which are
            applied on this chart
    Dimension:
      type: object
      properties:
        height:
          type: integer
          description: Describes the Height of the Visualization
        width:
          type: integer
          description: Describes the Width of the Visualization
    Plot:
      type: object
      properties:
        label:
          type: string
          description: Label which has to be printed in the Visualization Charts
        name:
          type: string
          description: Name of the legends which are to be used in the Charts
        value:
          type: integer
          description: Holds the value of plot response
          format: int64
        symbol:
          type: string
          description: Symbol that has to be used with the Value. Amount or Value
            or Percentage etc.,
    Data:
      type: object
      properties:
        headerName:
          type: string
          description: Name of the header when the grouping of all the plots are done
        headerValue:
          type: integer
          description: Total Value of all the plots are put as Header Value
          format: int64
        headerSymbol:
          type: string
          description: Symbol which has to be used to represent
        plots:
          type: array
          description: Symbol that has to be used with the Value. Amount or Value
            or Percentage etc.,
          items:
            $ref: '#/components/schemas/Plot'
    Visualization:
      type: object
      properties:
        id:
          type: integer
          description: Unique Identifier for a Visualization
        name:
          type: string
          description: Name of the Visualization
        dimensions:
          $ref: '#/components/schemas/Dimension'
        vizType:
          type: string
          description: Type of Visualization which groups the type of different charts
            in specific
        charts:
          type: array
          items:
            $ref: '#/components/schemas/Chart'
    Tab:
      type: object
      properties:
        row:
          type: integer
          description: This defines the row number in which this Visualization will
            have to appear on UI
        name:
          type: string
          description: Name of the tab on which the visualization has to appear is
            defined here
        vizArray:
          type: array
          items:
            $ref: '#/components/schemas/Visualization'
    Dashboard:
      type: object
      properties:
        name:
          type: string
          description: Name of the Dashboard
        id:
          type: string
          description: Unique ID of the Dashboard
        isActive:
          type: boolean
          description: Active / Inactive Status of the Dashboard
        style:
          type: string
          description: Type of the Style which will be represented
          format: enum - LINEAR - TABBED
        visualizations:
          type: array
          items:
            $ref: '#/components/schemas/Tab'
    RequestDate:
      type: object
      properties:
        startDate:
          type: string
          description: Request Date Starting Date field
        endDate:
          type: string
          description: Request Date Ending Date Field
    AggregationRequest:
      type: object
      properties:
        visualizationType:
          type: string
          description: Request mentions the type of Visualization which it needs the
            data for
          format: enum - PIE - BAR - METRIC - LINE - TABLE
        visualizationCode:
          type: string
          description: Code of the Visualization for which the data has to be obtained.
        queryType:
          type: string
          description: Type of Query which has to be used to get the data for this
            visualization
        filter:
          type: object
          additionalProperties:
            type: string
          description: A map of String and and String to hold the Filters which are
            applied on this chart
        moduleLevel:
          type: string
          description: Which Module is being represented is to be added here.
          format: enum - PT - TL - PGR - HOME_REVENUE - HOME_SERVICES
        requestDate:
          $ref: '#/components/schemas/RequestDate'
    DashboardRequest:
      type: object
      properties:
        header:
          type: object
          additionalProperties:
            type: string
          description: A map of String and and String to hold the Header Filters which
            are applied on this dashboard
        aggregationRequest:
          $ref: '#/components/schemas/AggregationRequest'
    DashboardConfigResponse:
      type: object
      properties:
        statusInfo:
          $ref: '#/components/schemas/StatusInfo'
        responseData:
          type: array
          items:
            $ref: '#/components/schemas/Dashboard'
    DashboardResponse:
      type: object
      properties:
        statusInfo:
          $ref: '#/components/schemas/StatusInfo'
        responseData:
          type: array
          items:
            $ref: '#/components/schemas/ChartApiResponse'
    ChartApiResponse:
      type: object
      properties:
        chartType:
          maxLength: 128
          type: string
          description: Type of Chart which are to be used to represent the data on
            Dashboard
        chartFormat:
          maxLength: 32
          type: string
          description: Format specifies as which library to be used to paint the visualizations
        drillDownChartId:
          type: string
          description: Chart ID which is to be used for Drill Downs
        filter:
          type: object
          additionalProperties:
            type: string
          description: A map of String and and String to hold the Filters which are
            applied on this chart
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
    StatusInfo:
      type: object
      properties:
        statusCode:
          maxLength: 128
          type: string
          description: unique API ID
        statusMessage:
          maxLength: 32
          type: string
          description: API version
        errorCode:
          type: integer
          description: response time in epoch
          format: int64
        errorMessage:
          maxLength: 256
          type: string
          description: unique response message id (UUID) - will usually be the correlation
            id from the server
      description: Status Information object will hold the run time status and the
        live response obtained from the server for the respective API Call.
